install.packages('rafalib')
install.packages('swirl')
library(swirl)
ls
ls()
print(sales_report)
rm(list=ls())
ls()
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
main()
main()
getwd()
ls()
x<- 9
ls()
list.file()
list.files()
?list.files()
?list.files()
?list.files
args(list.file())
args(list.files())
args(list.files)
old.dir<- getwd()
?dir.create()
dir.create(testdir)
dir.create(getwd()/testdir)
dir.create('testdir')
setwd('testdir')
file.create('mytest.R')
ls()
list.files()
file.exists('mytest.R')
file.info()
file.info('mytest.R')
file.rename('mytest.R','mytest2.R')
file.copy('mytest2.R','mytest3.R')
file.path()
file.path('mytest3.R')
file.path('folder1','folder2')
?dir.create
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
getwd()
setwd(old.dir)
1:20
pi:10
15:1
?:
?':'
seq(1,20)
seq(1,20,by=.5)
seq(1,10,by=.5)
seq(0,10,by=.5)
my_seq <- seq(5,10,length=30)
my_seq.length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,40)
rep(0,times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c('My','name','is')
my_char
paste(my_char, collapse = ' ')
my_name <- c(my_char, 'Lucidity')
my_name
paste(my_name, collapse collapse = ' ')
paste(my_name, collapse = ' ')
paste('Hello','world!', collapse = ' ')
paste('Hello','world!', sep  = ' ')
paste(1:3, c('X','Y','Z'), sep = ' ')
paste(1:3, c('X','Y','Z'), sep = '')
paste(LETTERS, 1:4, sep = '-')
version()
version
version
x <- c(2.23,3.45,1.87,2.11,7.33,18.34,19.23)
x
?ave()
ave(x)
ave(x, FUN = mean)
?for()
?for
?for
swirl()
library(swirl)
install.packages('rafalib')
install.packages('swirl')
iter <- 1:25
?exponent
?power
iter^2
sum <- sum(iter^2)
sum
cars
className(cars)
class(cars)
sum(cars[,dist])
sum(cars[dist])
cars[,2]
sum(cars[,2])
ave(cars[,2])
?which
which(85, cars[,2])
which(cars[,2]==85)
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_data)
sum(my_an)
sum(my_na)
my_data
0/0
Inf-Inf
6x
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c('foo','bar','norf')
identical(vect, vect2)
skip()
vect[c('foo','bar')]
?workspace
?? workspace
ls
ls()
rm(list = ls())
library("ggplot2")
install.packages('ggplot2')
library("ggplot2")
sales_report <- read.csv("/Users/bryant/NetBeansProjects/capstone/SalesReport.csv")
ggplot(sales_report, aes(x = Item, y = number_sold)) + geom_bar(stat = 'identity') + coord_flip()
sales_report <- read.csv("/Users/bryant/NetBeansProjects/capstone/SalesReport.csv")
ggplot(sales_report, aes(x = Item, y = number_sold)) + geom_bar(stat = 'identity') + coord_flip()
ggplot(sales_report, aes(x = Item, y = number_sold)) + geom_bar(stat = 'identity') + coord_flip()
swirl()
library(swirl)
swirl()
bye()
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function('My first function!')
boring_function
my_mean <- sum(my_vector)/length(my_vector)
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div =2)
args(remainder)
submit()
?standard deviation
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[lenght[x]]},c(8,4,0))
evaluate(function(x){x[length[x]]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste('Programming', 'is','fun!')
submit()
telegram('What', 'a', 'wonderful', 'day.')
mad_libs('in a cave', 'horrendous', 'rubber ducky')
submit()
mad_libs('in a cave', 'horrendous', 'rubber ducky')
submit()
'I'%p%'love'%p%'R!'
mad_libs(place = 'in a cave', adjective = 'horrendous', noun = 'rubber ducky')
View(`%p%`)
View(boring_function)
View(evaluate)
View(mad_libs)
View(remainder)
source('/private/var/folders/xf/_qyhgcb113n530lfs5zg5rj00000gn/T/RtmpkDfzb0/bin_op.R')
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$landmass,flags$animate, mean)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population,flags$landmass, summary)
rm(list = ls())
library(downloader)
install.packages('downloader')
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- 'femaleMiceWeights.csv'
download(url, destfile = filename)
fMiceWeights <- read.csv(filename)
fMiceWeights[12,2]
fMiceWeights$Bodyweight[11]
length(fMiceWeights)
fMiceWeights$Bodyweight
length(fMiceWeights$Bodyweight)
fMiceWeights
mean(fMiceWeights$Bodyweight[13:24])
?sample
set.seed(1)
sample(fMiceWeights,1)
sample(fMiceWeights$Bodyweight[13:24],1)
rm(fMiceWeights)
fMiceWeights <- read.csv(filename)
set.seed(1)
sample(fMiceWeights$Bodyweight[13:24],1)
sample(fMiceWeights$Bodyweight[13:24],1)
install.packages('dplyr')
view(fMiceWeights)
View(fMiceWeights)
library("dplyr", lib.loc="/usr/local/lib/R/3.4/site-library")
control <- filter(fMiceWeights, Diet == 'chow')
control
select(control, Bodyweight)
?unlist
control <- select(control, Bodyweight)
control
unlist(control)
mean(control)
control <- filter(fMiceWeights, Diet == 'chow') %>% select(Bodyweights) %>% unlist
control <- unlist(control)
mean(control)
rm(list = ls())
url="https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv"
filename <- basename(url)
download(url,filename)
read.csv(filename)
dat <- read.csv(filename)
View(dat)
class(dat)
primates <- filter(dat, order == 'Primates')
primates
nrow(primates)
class(primates)
filter(dat, order == 'Primates') %>% select(sleep) %>% sum
filter(dat, order == 'Primates') %>% select(sleep_total)
totalSleep <- filter(dat, order == 'Primates') %>% select(sleep_total)
class(totalSleep)
mean(unlist(totalSleep))
?summarize
summarize(totalSleep)
totalSleep
totalSleep <- filter(dat, order == 'Primates') %>% summarize(sleep_total)
totalSleep <- summarize(filter(dat, order == 'Primates'))
totalSleep
totalSleep <- summarize(unlist(filter(dat, order == 'Primates')))
totalSleep <- summarize(filter(dat, order == 'Primates'), mean)
totalSleep <- summarize(filter(dat, order == 'Primates'), mean())
totalSleep <- summarize(dat, mean(filter(dat, order == 'Primates')))
totalSleep <- summarise(filter(dat, order == 'Primates'), mean())
summarise(filter(dat, order == 'Primates'))
summarise(mean(filter(dat, order == 'Primates')))
summarise(filter(dat, order == 'Primates'), mean)
summarise(filter(dat, order == 'Primates'), mean())
filter(dat,order == 'Primates') %>% summarize()
filter(dat,order == 'Primates') %>% summarize(mean(disp))
filter(dat,order == 'Primates') %>% summarize(mean = mean(disp))
filter(dat,order == 'Primates') %>% summarize(mean = mean(x))
setwd("~/workspaces/R")
rm(list=ls())
read.csv('femaleMiceWeights.csv')
dat <- read.csv('femaleMiceWeights.csv')
View(dat)
control <- filter(dat, Diet == 'chow') %>% select(Bodyweight) %>% unlist
treatment <- filter(dat, Diet == 'hf') %>% select(Bodyweight)%>% unlist
mean(treatment) - mean(control)
population <- read.csv('femaleControlsPopulation.csv')
population <- unlist(population)
mean(sample(population, 12))
mean(population)
set.seed(1)
samp <- sample(population, 5)
abs(samp - mean(population))
abs(mean(samp) - mean(population))
set.seed()
set.seed(5)
samp <- sample(population, 5)
abs(mean(samp) - mean(population))
observation <- mean(treatment) - mean(control)
control <- sample(population, 12)
treatment <- sample(population, 12)
abs(mean(samp) - mean(population))
control <- sample(population, 12)
treatment <- sample(population, 12)
abs(mean(samp) - mean(population))
control <- sample(population, 12)
treatment <- sample(population, 12)
abs(mean(samp) - mean(population))
?set.seed
.Random.seed
control <- sample(population, 12)
treatment <- sample(population, 12)
abs(mean(samp) - mean(population))
control <- sample(population, 12)
treatment <- sample(population, 12)
abs(mean(control) - mean(treatment))
control <- sample(population, 12)
treatment <- sample(population, 12)
abs(mean(control) - mean(treatment))
control <- sample(population, 12)
treatment <- sample(population, 12)
abs(mean(control) - mean(treatment))
n <- 10000
nulls <- vector('numeric', n)
for(i in 1:n){
control <- sample(population, 12)
treatment <- sample(population, 12)
nulls[i <- mean(control) - mean(treatment)
}
for(i in 1:n){
control <- sample(population, 12)
treatment <- sample(population, 12)
nulls[i] <- mean(control) - mean(treatment)
}
hist(nulls)
sum(null > observation)
sum(nulls > observation)
mean( nulls > observation)
mean(abs(nulls) > observation)
rm(list = ls())
dat <- read.csv('femaleMiceWeights.csv')
x <- unlist(dat)
set.seed(1)
n<- 5000
samples <- vector('numeric',n)
n<- 1000
for(i in 1:n){
samples[i] <- mean(sample(x, 5))
}
hist(samples)
mean(x)
mean(samples)
population <- read.csv('femaleControlsPopulation.csv')
x <- unlist(population)
set.seed(1)
n<- 1000
samples <- vector('numeric',n)
for(i in 1:n){
samples[i] <- mean(sample(x, 5))
}
hist(samples)
mean(x)
mean(samples)
mean(abs(samples - mean(x)) > 1)
set.seed(1)
n<- 10000
for(i in 1:n){
samples[i] <- mean(sample(x, 5))
}
mean(abs(samples - mean(x)) > 1)
n<- 1000
samples <- vector('numeric',n)
for(i in 1:n){
samples[i] <- mean(sample(x, 50))
}
mean(abs(samples - mean(x)) > 1)
hist(samples)
set.seed(1)
n<- 1000
samples <- vector('numeric',n)
for(i in 1:n){
samples[i] <- mean(sample(x, 50))
}
mean(abs(samples - mean(x)) > 1)
install.packages('gapminder')
library(gapminder)
data("gapminder")
head(gapminder)
View(gapminder)
x <- filter(gapminder, year == '1952') %>% select(country) %>% ulist
x <- filter(gapminder, year == '1952') %>% select(country) %>% unlist
x
hist(x)
x <- filter(gapminder, year == 1952) %>% select(country)
x
x <- filter(gapminder, year == 1952) %>% select(lifeExp)
x
x <- unlist(x)
x
unique(gapminder$country)
length(x)
hist(x)
x <- filter(gapminder, year == 1952 && country == 'Switzerland') %>% select(lifeExp)
x
x <- filter(gapminder,country == 'Switzerland') %>% select(lifeExp)
x
mean(x)
mean(unlist(x))
x <- filter(gapminder, year == 1952 ) %>% select(lifeExp)
x <- unlist(x)
mean(x <= 40)
mean(x <= 60) - mean(x<=40)
plot(ecdf(x))
sapply(x, function(y){mean(x<=y)})
length(sapply(x, function(y){mean(x<=y)}))
mean(sapply(x, function(y){x<=y})
plot(ecdf(x))
mean(sapply(x, function(y){x<=y}))
mean(sapply(x, function(40){x<=y}))
mean(x <= 40)
y <- 40
mean(sapply(x, function(y){x<=y}))
?sapply
mean(sapply(x, function(x){mean(x<=y)}))
rm(list = ls())
